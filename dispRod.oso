OpenShadingLanguage 1.00
# Compiled by oslc 1.7.4.pixar38bde12
# options: 
shader dispRod
param	float	depth	0		%read{13,55} %write{2147483647,-1}
param	float	width	0		%read{8,42} %write{2147483647,-1}
param	float	fuzz	0.02		%read{8,70} %write{2147483647,-1}
param	float	where	0.5		%read{6,38} %write{2147483647,-1}
param	float	repeatCount	8		%read{0,30} %write{2147483647,-1}
oparam	float	resultF	0		%read{22,155} %write{13,158}
global	float	u	%read{31,134} %write{2147483647,-1}
global	float	v	%read{0,153} %write{2147483647,-1}
local	float	___258_result	%read{53,154} %write{51,153}
local	float	___259_xclamped	%read{49,150} %write{48,149}
local	float	dist	%read{10,10} %write{7,7}
local	float	inStrip	%read{12,12} %write{11,11}
local	float	vv	%read{6,6} %write{5,5}
local	float	bands	%read{156,156} %write{22,22}
local	float	dist2	%read{47,52} %write{40,40}
local	float	inDisk	%read{54,54} %write{53,53}
local	float	vv2	%read{37,37} %write{29,29}
local	float	uu2	%read{37,37} %write{36,36}
local	float	bumps	%read{156,156} %write{83,83}
local	float	s1	%read{100,100} %write{91,91}
local	float	s2	%read{102,102} %write{99,99}
local	float	lattice	%read{106,143} %write{105,105}
local	float	latticeOut	%read{157,157} %write{133,133}
local	float	groove1	%read{140,140} %write{139,139}
local	float	groovePattern	%read{142,142} %write{141,141}
local	float	grooveOut	%read{158,158} %write{155,155}
temp	float	$tmp1	%read{2,5} %write{0,0}
const	float	$const2	1		%read{2,138} %write{2147483647,-1}
const	string	$const3	"mod"		%read{1,135} %write{2147483647,-1}
temp	float	$tmp2	%read{4,4} %write{3,3}
temp	float	$tmp3	%read{3,3} %write{2,2}
temp	float	$tmp4	%read{5,5} %write{4,4}
temp	float	$tmp5	%read{7,7} %write{6,6}
temp	float	$tmp6	%read{11,11} %write{10,10}
temp	float	$tmp7	%read{10,10} %write{8,8}
temp	float	$tmp8	%read{10,10} %write{9,9}
temp	float	$tmp9	%read{13,13} %write{12,12}
temp	float	$tmp10	%read{20,20} %write{16,16}
const	float	$const4	0.2		%read{14,15} %write{2147483647,-1}
temp	float	$tmp11	%read{16,16} %write{14,14}
temp	float	$tmp12	%read{16,16} %write{15,15}
temp	float	$tmp13	%read{20,20} %write{19,19}
const	float	$const5	0.89999998		%read{17,69} %write{2147483647,-1}
temp	float	$tmp14	%read{19,19} %write{17,17}
temp	float	$tmp15	%read{19,19} %write{18,18}
temp	float	$tmp16	%read{21,21} %write{20,20}
temp	float	$tmp17	%read{22,22} %write{21,21}
temp	float	$tmp18	%read{24,24} %write{23,23}
const	float	$const7	10		%read{23,30} %write{2147483647,-1}
temp	float	$tmp19	%read{26,29} %write{24,24}
temp	float	$tmp20	%read{28,28} %write{27,27}
temp	float	$tmp21	%read{27,27} %write{26,26}
temp	float	$tmp22	%read{29,29} %write{28,28}
temp	float	$tmp23	%read{31,31} %write{30,30}
temp	float	$tmp24	%read{33,36} %write{31,31}
temp	float	$tmp25	%read{35,35} %write{34,34}
temp	float	$tmp26	%read{34,34} %write{33,33}
temp	float	$tmp27	%read{36,36} %write{35,35}
temp	float	$tmp28	%read{39,39} %write{37,37}
temp	float	$tmp29	%read{39,39} %write{38,38}
const	float	$const9	2		%read{38,38} %write{2147483647,-1}
temp	float	$tmp30	%read{40,40} %write{39,39}
temp	float	$tmp31	%read{44,52} %write{41,41}
temp	float	$tmp32	%read{44,50} %write{42,42}
const	string	$const10	"linearstep"		%read{43,144} %write{2147483647,-1}
temp	int	$tmp33	%read{45,45} %write{44,44}
const	string	$const11	"clamp"		%read{46,147} %write{2147483647,-1}
temp	float	$tmp34	%read{48,48} %write{47,47}
temp	float	$tmp35	%read{51,51} %write{49,49}
temp	float	$tmp36	%read{51,51} %write{50,50}
const	float	$const12	0.60000002		%read{54,54} %write{2147483647,-1}
temp	float	$tmp37	%read{55,55} %write{54,54}
temp	float	$tmp38	%read{82,82} %write{68,68}
const	float	$const13	0.25		%read{56,56} %write{2147483647,-1}
temp	float	$tmp39	%read{59,67} %write{56,56}
const	float	$const14	0.25999999		%read{57,106} %write{2147483647,-1}
temp	float	$tmp40	%read{59,65} %write{57,57}
temp	int	$tmp41	%read{60,60} %write{59,59}
temp	float	$tmp42	%read{63,63} %write{62,62}
temp	float	$tmp43	%read{66,66} %write{64,64}
temp	float	$tmp44	%read{66,66} %write{65,65}
temp	float	$tmp45	%read{82,82} %write{81,81}
temp	float	$tmp46	%read{72,80} %write{69,69}
const	float	$const15	0.94999999		%read{70,143} %write{2147483647,-1}
temp	float	$tmp47	%read{72,78} %write{70,70}
temp	int	$tmp48	%read{73,73} %write{72,72}
temp	float	$tmp49	%read{76,76} %write{75,75}
temp	float	$tmp50	%read{79,79} %write{77,77}
temp	float	$tmp51	%read{79,79} %write{78,78}
temp	float	$tmp52	%read{83,83} %write{82,82}
temp	float	$tmp53	%read{86,86} %write{84,84}
const	float	$const17	60		%read{84,134} %write{2147483647,-1}
temp	float	$tmp54	%read{86,86} %write{85,85}
const	float	$const19	9		%read{85,93} %write{2147483647,-1}
temp	float	$tmp55	%read{88,91} %write{86,86}
temp	float	$tmp56	%read{90,90} %write{89,89}
temp	float	$tmp57	%read{89,89} %write{88,88}
temp	float	$tmp58	%read{91,91} %write{90,90}
temp	float	$tmp59	%read{94,94} %write{92,92}
temp	float	$tmp60	%read{94,94} %write{93,93}
temp	float	$tmp61	%read{96,99} %write{94,94}
temp	float	$tmp62	%read{98,98} %write{97,97}
temp	float	$tmp63	%read{97,97} %write{96,96}
temp	float	$tmp64	%read{99,99} %write{98,98}
temp	float	$tmp65	%read{105,105} %write{104,104}
temp	float	$tmp66	%read{104,104} %write{101,101}
const	float	$const20	0.5		%read{100,140} %write{2147483647,-1}
temp	float	$tmp67	%read{101,101} %write{100,100}
temp	float	$tmp68	%read{104,104} %write{103,103}
temp	float	$tmp69	%read{103,103} %write{102,102}
const	float	$const22	3		%read{105,105} %write{2147483647,-1}
temp	float	$tmp70	%read{132,132} %write{118,118}
temp	float	$tmp71	%read{109,117} %write{106,106}
const	float	$const23	0.75		%read{107,119} %write{2147483647,-1}
temp	float	$tmp72	%read{109,115} %write{107,107}
temp	int	$tmp73	%read{110,110} %write{109,109}
temp	float	$tmp74	%read{113,113} %write{112,112}
temp	float	$tmp75	%read{116,116} %write{114,114}
temp	float	$tmp76	%read{116,116} %write{115,115}
temp	float	$tmp77	%read{132,132} %write{131,131}
temp	float	$tmp78	%read{122,130} %write{119,119}
const	float	$const24	0.80000001		%read{120,120} %write{2147483647,-1}
temp	float	$tmp79	%read{122,128} %write{120,120}
temp	int	$tmp80	%read{123,123} %write{122,122}
temp	float	$tmp81	%read{126,126} %write{125,125}
temp	float	$tmp82	%read{129,129} %write{127,127}
temp	float	$tmp83	%read{129,129} %write{128,128}
temp	float	$tmp84	%read{133,133} %write{132,132}
temp	float	$tmp85	%read{136,139} %write{134,134}
temp	float	$tmp86	%read{138,138} %write{137,137}
temp	float	$tmp87	%read{137,137} %write{136,136}
temp	float	$tmp88	%read{139,139} %write{138,138}
temp	float	$tmp89	%read{141,141} %write{140,140}
temp	float	$tmp90	%read{155,155} %write{154,154}
temp	float	$tmp91	%read{145,153} %write{142,142}
temp	float	$tmp92	%read{145,151} %write{143,143}
temp	int	$tmp93	%read{146,146} %write{145,145}
temp	float	$tmp94	%read{149,149} %write{148,148}
temp	float	$tmp95	%read{152,152} %write{150,150}
temp	float	$tmp96	%read{152,152} %write{151,151}
temp	float	$tmp97	%read{157,157} %write{156,156}
temp	float	$tmp98	%read{158,158} %write{157,157}
code ___main___
# dispRod.osl:14
# 	float vv = mod(repeatCount*v,1);
	mul		$tmp1 repeatCount v 	%filename{"dispRod.osl"} %line{14} %argrw{"wrr"}
	functioncall	$const3 6 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:135
# PERCOMP1 (ceil)
	div		$tmp3 $tmp1 $const2 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp2 $tmp3 	%argrw{"wr"}
	mul		$tmp4 $const2 $tmp2 	%argrw{"wrr"}
	sub		vv $tmp1 $tmp4 	%argrw{"wrr"}
# dispRod.osl:15
# 	dist=abs(vv-where);
	sub		$tmp5 vv where 	%filename{"dispRod.osl"} %line{15} %argrw{"wrr"}
	abs		dist $tmp5 	%argrw{"wr"}
# dispRod.osl:17
#     inStrip =1-smoothstep(width-fuzz,width+fuzz,dist);
	sub		$tmp7 width fuzz 	%line{17} %argrw{"wrr"}
	add		$tmp8 width fuzz 	%argrw{"wrr"}
	smoothstep	$tmp6 $tmp7 $tmp8 dist 	%argrw{"wrrr"}
	sub		inStrip $const2 $tmp6 	%argrw{"wrr"}
# dispRod.osl:20
# 	resultF=-inStrip*depth;
	neg		$tmp9 inStrip 	%line{20} %argrw{"wr"}
	mul		resultF $tmp9 depth 	%argrw{"wrr"}
# dispRod.osl:22
# 	float bands=resultF*( 1-(smoothstep(0.2-fuzz,0.2+fuzz,v)-smoothstep(0.9-fuzz,0.9+fuzz,v)));	
	sub		$tmp11 $const4 fuzz 	%line{22} %argrw{"wrr"}
	add		$tmp12 $const4 fuzz 	%argrw{"wrr"}
	smoothstep	$tmp10 $tmp11 $tmp12 v 	%argrw{"wrrr"}
	sub		$tmp14 $const5 fuzz 	%argrw{"wrr"}
	add		$tmp15 $const5 fuzz 	%argrw{"wrr"}
	smoothstep	$tmp13 $tmp14 $tmp15 v 	%argrw{"wrrr"}
	sub		$tmp16 $tmp10 $tmp13 	%argrw{"wrr"}
	sub		$tmp17 $const2 $tmp16 	%argrw{"wrr"}
	mul		bands resultF $tmp17 	%argrw{"wrr"}
# dispRod.osl:28
# 	float vv2 = mod(10*repeatCount*v,1);
	mul		$tmp18 $const7 repeatCount 	%line{28} %argrw{"wrr"}
	mul		$tmp19 $tmp18 v 	%argrw{"wrr"}
	functioncall	$const3 30 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:135
# float  log (float a,  float b) { return log(a)/log(b); }
	div		$tmp21 $tmp19 $const2 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp20 $tmp21 	%argrw{"wr"}
	mul		$tmp22 $const2 $tmp20 	%argrw{"wrr"}
	sub		vv2 $tmp19 $tmp22 	%argrw{"wrr"}
# dispRod.osl:29
# 	float uu2 = mod(10*repeatCount*u,1);
	mul		$tmp23 $const7 repeatCount 	%filename{"dispRod.osl"} %line{29} %argrw{"wrr"}
	mul		$tmp24 $tmp23 u 	%argrw{"wrr"}
	functioncall	$const3 37 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:135
# color  log (color a,  float b) { return log(a)/log(b); }
	div		$tmp26 $tmp24 $const2 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp25 $tmp26 	%argrw{"wr"}
	mul		$tmp27 $const2 $tmp25 	%argrw{"wrr"}
	sub		uu2 $tmp24 $tmp27 	%argrw{"wrr"}
# dispRod.osl:31
# 	dist2=abs(vv2*uu2-2*where);
	mul		$tmp28 vv2 uu2 	%filename{"dispRod.osl"} %line{31} %argrw{"wrr"}
	mul		$tmp29 $const9 where 	%argrw{"wrr"}
	sub		$tmp30 $tmp28 $tmp29 	%argrw{"wrr"}
	abs		dist2 $tmp30 	%argrw{"wr"}
# dispRod.osl:33
# 	inDisk =(linearstep(width-(fuzz),width+(fuzz),dist2));
	sub		$tmp31 width fuzz 	%line{33} %argrw{"wrr"}
	add		$tmp32 width fuzz 	%argrw{"wrr"}
	functioncall	$const10 54 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:424
#                    dot (vector(1, -0.2716, -0.6469), (vector)x),
	neq		$tmp33 $tmp31 $tmp32 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{424} %argrw{"wrr"}
	if		$tmp33 52 53 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:425
#                    dot (vector(1, -1.1082,  1.7051), (vector)x));
	functioncall	$const11 49 	%line{425} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp34 dist2 $tmp32 	%line{144} %argrw{"wrr"}
	max		___259_xclamped $tmp34 $tmp31 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:426
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp35 ___259_xclamped $tmp31 	%line{426} %argrw{"wrr"}
	sub		$tmp36 $tmp32 $tmp31 	%argrw{"wrr"}
	div		___258_result $tmp35 $tmp36 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:428
#         result = step (edge0, x);
	step		___258_result $tmp31 dist2 	%line{428} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:430
#     return result;
	assign		inDisk ___258_result 	%line{430} %argrw{"wr"}
# dispRod.osl:34
# 	resultF=inDisk*0.6*depth;
	mul		$tmp37 inDisk $const12 	%filename{"dispRod.osl"} %line{34} %argrw{"wrr"}
	mul		resultF $tmp37 depth 	%argrw{"wrr"}
# dispRod.osl:35
#     float bumps=resultF*((linearstep(0.25-fuzz,0.26+fuzz,v)-linearstep(0.9-fuzz,0.95+fuzz,v)));
	sub		$tmp39 $const13 fuzz 	%line{35} %argrw{"wrr"}
	add		$tmp40 $const14 fuzz 	%argrw{"wrr"}
	functioncall	$const10 69 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:424
#     else if (from == "YIQ")
	neq		$tmp41 $tmp39 $tmp40 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{424} %argrw{"wrr"}
	if		$tmp41 67 68 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:425
#         r = color (dot (vector(1,  0.9557,  0.6199), (vector)x),
	functioncall	$const11 64 	%line{425} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp42 v $tmp40 	%line{144} %argrw{"wrr"}
	max		___259_xclamped $tmp42 $tmp39 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:426
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp43 ___259_xclamped $tmp39 	%line{426} %argrw{"wrr"}
	sub		$tmp44 $tmp40 $tmp39 	%argrw{"wrr"}
	div		___258_result $tmp43 $tmp44 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:428
#         result = step (edge0, x);
	step		___258_result $tmp39 v 	%line{428} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:430
#     return result;
	assign		$tmp38 ___258_result 	%line{430} %argrw{"wr"}
# dispRod.osl:35
#     float bumps=resultF*((linearstep(0.25-fuzz,0.26+fuzz,v)-linearstep(0.9-fuzz,0.95+fuzz,v)));
	sub		$tmp46 $const5 fuzz 	%filename{"dispRod.osl"} %line{35} %argrw{"wrr"}
	add		$tmp47 $const15 fuzz 	%argrw{"wrr"}
	functioncall	$const10 82 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:424
#     else if (from == "YIQ")
	neq		$tmp48 $tmp46 $tmp47 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{424} %argrw{"wrr"}
	if		$tmp48 80 81 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:425
#         r = color (dot (vector(1,  0.9557,  0.6199), (vector)x),
	functioncall	$const11 77 	%line{425} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp49 v $tmp47 	%line{144} %argrw{"wrr"}
	max		___259_xclamped $tmp49 $tmp46 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:426
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp50 ___259_xclamped $tmp46 	%line{426} %argrw{"wrr"}
	sub		$tmp51 $tmp47 $tmp46 	%argrw{"wrr"}
	div		___258_result $tmp50 $tmp51 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:428
#         result = step (edge0, x);
	step		___258_result $tmp46 v 	%line{428} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:430
#     return result;
	assign		$tmp45 ___258_result 	%line{430} %argrw{"wr"}
# dispRod.osl:35
#     float bumps=resultF*((linearstep(0.25-fuzz,0.26+fuzz,v)-linearstep(0.9-fuzz,0.95+fuzz,v)));
	sub		$tmp52 $tmp38 $tmp45 	%filename{"dispRod.osl"} %line{35} %argrw{"wrr"}
	mul		bumps resultF $tmp52 	%argrw{"wrr"}
# dispRod.osl:40
# 	float s1=mod(v*60+u*9,1);
	mul		$tmp53 v $const17 	%line{40} %argrw{"wrr"}
	mul		$tmp54 u $const19 	%argrw{"wrr"}
	add		$tmp55 $tmp53 $tmp54 	%argrw{"wrr"}
	functioncall	$const3 92 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:135
# PERCOMP2 (atan2)
	div		$tmp57 $tmp55 $const2 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp56 $tmp57 	%argrw{"wr"}
	mul		$tmp58 $const2 $tmp56 	%argrw{"wrr"}
	sub		s1 $tmp55 $tmp58 	%argrw{"wrr"}
# dispRod.osl:41
# 	float s2=mod(v*60-u*9,1);
	mul		$tmp59 v $const17 	%filename{"dispRod.osl"} %line{41} %argrw{"wrr"}
	mul		$tmp60 u $const19 	%argrw{"wrr"}
	sub		$tmp61 $tmp59 $tmp60 	%argrw{"wrr"}
	functioncall	$const3 100 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:135
# PERCOMP1 (atan)
	div		$tmp63 $tmp61 $const2 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp62 $tmp63 	%argrw{"wr"}
	mul		$tmp64 $const2 $tmp62 	%argrw{"wrr"}
	sub		s2 $tmp61 $tmp64 	%argrw{"wrr"}
# dispRod.osl:43
# 	float lattice=max(abs(0.5-s1),abs(0.5-s2))*3;
	sub		$tmp67 $const20 s1 	%filename{"dispRod.osl"} %line{43} %argrw{"wrr"}
	abs		$tmp66 $tmp67 	%argrw{"wr"}
	sub		$tmp69 $const20 s2 	%argrw{"wrr"}
	abs		$tmp68 $tmp69 	%argrw{"wr"}
	max		$tmp65 $tmp66 $tmp68 	%argrw{"wrr"}
	mul		lattice $tmp65 $const22 	%argrw{"wrr"}
# dispRod.osl:46
# 		float latticeOut=resultF*((linearstep(0.26-lattice,0.75+lattice,v)-linearstep(0.75-lattice,0.80+lattice,v)));	
	sub		$tmp71 $const14 lattice 	%line{46} %argrw{"wrr"}
	add		$tmp72 $const23 lattice 	%argrw{"wrr"}
	functioncall	$const10 119 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:424
#         }
	neq		$tmp73 $tmp71 $tmp72 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{424} %argrw{"wrr"}
	if		$tmp73 117 118 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:425
#         return r;
	functioncall	$const11 114 	%line{425} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp74 v $tmp72 	%line{144} %argrw{"wrr"}
	max		___259_xclamped $tmp74 $tmp71 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:426
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp75 ___259_xclamped $tmp71 	%line{426} %argrw{"wrr"}
	sub		$tmp76 $tmp72 $tmp71 	%argrw{"wrr"}
	div		___258_result $tmp75 $tmp76 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:428
#         result = step (edge0, x);
	step		___258_result $tmp71 v 	%line{428} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:430
#     return result;
	assign		$tmp70 ___258_result 	%line{430} %argrw{"wr"}
# dispRod.osl:46
# 		float latticeOut=resultF*((linearstep(0.26-lattice,0.75+lattice,v)-linearstep(0.75-lattice,0.80+lattice,v)));	
	sub		$tmp78 $const23 lattice 	%filename{"dispRod.osl"} %line{46} %argrw{"wrr"}
	add		$tmp79 $const24 lattice 	%argrw{"wrr"}
	functioncall	$const10 132 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:424
#         }
	neq		$tmp80 $tmp78 $tmp79 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{424} %argrw{"wrr"}
	if		$tmp80 130 131 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:425
#         return r;
	functioncall	$const11 127 	%line{425} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp81 v $tmp79 	%line{144} %argrw{"wrr"}
	max		___259_xclamped $tmp81 $tmp78 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:426
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp82 ___259_xclamped $tmp78 	%line{426} %argrw{"wrr"}
	sub		$tmp83 $tmp79 $tmp78 	%argrw{"wrr"}
	div		___258_result $tmp82 $tmp83 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:428
#         result = step (edge0, x);
	step		___258_result $tmp78 v 	%line{428} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:430
#     return result;
	assign		$tmp77 ___258_result 	%line{430} %argrw{"wr"}
# dispRod.osl:46
# 		float latticeOut=resultF*((linearstep(0.26-lattice,0.75+lattice,v)-linearstep(0.75-lattice,0.80+lattice,v)));	
	sub		$tmp84 $tmp70 $tmp77 	%filename{"dispRod.osl"} %line{46} %argrw{"wrr"}
	mul		latticeOut resultF $tmp84 	%argrw{"wrr"}
# dispRod.osl:52
# 	float groove1 = mod(60*u,1);
	mul		$tmp85 $const17 u 	%line{52} %argrw{"wrr"}
	functioncall	$const3 140 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:135
# float  degrees (float x)  { return x*(180.0/M_PI); }
	div		$tmp87 $tmp85 $const2 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp86 $tmp87 	%argrw{"wr"}
	mul		$tmp88 $const2 $tmp86 	%argrw{"wrr"}
	sub		groove1 $tmp85 $tmp88 	%argrw{"wrr"}
# dispRod.osl:54
# 	float groovePattern = abs(0.5-groove1);
	sub		$tmp89 $const20 groove1 	%filename{"dispRod.osl"} %line{54} %argrw{"wrr"}
	abs		groovePattern $tmp89 	%argrw{"wr"}
# dispRod.osl:55
# 	float grooveOut = resultF*(linearstep(0.95-groovePattern,0.95+lattice,v));
	sub		$tmp91 $const15 groovePattern 	%line{55} %argrw{"wrr"}
	add		$tmp92 $const15 lattice 	%argrw{"wrr"}
	functioncall	$const10 155 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:424
#         // Easiest to convert hsl -> hsv, then hsv -> RGB (per Foley & van Dam)
	neq		$tmp93 $tmp91 $tmp92 	%filename{"/opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h"} %line{424} %argrw{"wrr"}
	if		$tmp93 153 154 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:425
#         float v = (l <= 0.5) ? (l * (1 + s)) : (l * (1 - s) + s);
	functioncall	$const11 150 	%line{425} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp94 v $tmp92 	%line{144} %argrw{"wrr"}
	max		___259_xclamped $tmp94 $tmp91 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:426
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp95 ___259_xclamped $tmp91 	%line{426} %argrw{"wrr"}
	sub		$tmp96 $tmp92 $tmp91 	%argrw{"wrr"}
	div		___258_result $tmp95 $tmp96 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:428
#         result = step (edge0, x);
	step		___258_result $tmp91 v 	%line{428} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-21.4/lib/osl/include/stdosl.h:430
#     return result;
	assign		$tmp90 ___258_result 	%line{430} %argrw{"wr"}
# dispRod.osl:55
# 	float grooveOut = resultF*(linearstep(0.95-groovePattern,0.95+lattice,v));
	mul		grooveOut resultF $tmp90 	%filename{"dispRod.osl"} %line{55} %argrw{"wrr"}
# dispRod.osl:59
# 	resultF=bands+bumps+latticeOut+grooveOut;
	add		$tmp97 bands bumps 	%line{59} %argrw{"wrr"}
	add		$tmp98 $tmp97 latticeOut 	%argrw{"wrr"}
	add		resultF $tmp98 grooveOut 	%argrw{"wrr"}
	end
